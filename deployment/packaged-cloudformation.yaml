AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FUEL PRICE GUIDE API
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: NetworkStack details
      Parameters:
      - NetworkStackName
    ParameterLabels:
      NetworkStackName:
        default: Network Stack Name
Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
    - dev
    - qa
    - prd
    ConstraintDescription: must be dev, prd or qa
  ProjectName:
    Description: Fuel Price Guide API
    Type: String
    AllowedValues:
    - vipernet
    - fuelpriceguide
  NetworkStackName:
    Description: The name of the network stack that exports values that this template
      imports.
    Type: String
  BucketBackOfficeLogsName:
    Description: S3 Bucket where back office logs will be stored
    Type: String
Mappings:
  Lambda:
    GenericPolicy:
      Arn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    VPCAccessRole:
      Arn: arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Name:
      getTest: fuelpriceguideApi-getTest
  ApiGateway:
    Model:
      NoContentResponse: ''
      GenericResponse: " #set($allParams = $input.params())\n{\n$input.json('$').body\n\
        }\n "
      GenericResponseWithBody: " #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
        #set($body = $errorMessageObj.get('body'))\n{\n    #foreach($paramName in\
        \ $body.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($body.get($paramName))\"\
        \n        #if($foreach.hasNext),#end\n    #end\n}"
      SuccessResponseWithOptionalFunctionalError: " #set($allParams = $input.params())\n\
        \ #set($responseResult = $input.json('$.success'))\n #if($responseResult !=\
        \ '')\n $input.json('$.success.body')\n #else\n $util.parseJson($input.json('$.error.body'))\n\
        \ #end "
      SuccessResponseCompleteWithOptionalFunctionalError: "#set($errorMessageObject\
        \ = $util.parseJson($input.path('$.errorMessage')))\n #if (  \"$!errorMessageObject\"\
        \ == \"\" )\n #set($allParams = $input.params())\n $input.json('$.body')\n\
        \ #else\n {\n \"error\": {\n \"type\": \"$errorMessageObject.body.error.type\"\
        ,\n \"code\": $errorMessageObject.body.error.code,\n \"message\": \"$errorMessageObject.body.error.message\"\
        ,\n \"emcpRequestId\": \"$errorMessageObject.body.error.emcpRequestId\"\n\
        \ }\n }\n #end"
      SuccessResponseWithBodyOnly: " #set($allParams = $input.params())\n $input.json('$.body') "
      SuccessResponseWithSuccessBodyOnly: " #set($allParams = $input.params())\n $input.json('$.success.body') "
Conditions:
  IsDev:
    Fn::Equals:
    - Ref: Environment
    - dev
Resources:
  GetTestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub:
        - /aws/lambda/${LogGroupName}
        - LogGroupName:
            Ref: GetTestLambda
  GetTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ExecuteClientPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-identity:*
            - cognito-idp:*
            Resource: '*'
  GetTestLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub:
        - ${ProjectName}-${Environment}-${LambdaName}
        - LambdaName:
            Fn::FindInMap:
            - Lambda
            - Name
            - getTest
      CodeUri: s3://vipernet-proldan-deployments/34a7de09b46563c08338299e2de3382b
      Handler: index.handler
      Runtime: nodejs18.x
      Description:
        Fn::Sub: 'Executes a client of a specific application. Lambda created by stack:
          ${AWS::StackName}.'
      MemorySize: 128
      Timeout: 9
      Role:
        Fn::GetAtt:
        - GetTestRole
        - Arn
      Events:
        ExecuteClient:
          Type: Api
          Properties:
            Path: /test/
            Method: GET
            RestApiId:
              Ref: fuelpriceguideAPI
      Environment: null
      Tags:
        Project:
          Ref: ProjectName
        Environment:
          Ref: Environment
        Level: global
        Application: fuelpriceguideapi
        Stack:
          Fn::Sub: ${AWS::StackName}
  fuelpriceguideAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Fn::Sub: ${Environment}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location:
              Fn::Sub:
              - s3://vipernet-proldan-deployments/artifacts/api/fuelpriceguide-api/fuelpriceguideApi-swagger.yaml
              - Environment:
                  Ref: Environment
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage Plan for Fuel Price Guide clients
          UsagePlanName: fuelpriceguide-usageplan
